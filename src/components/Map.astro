---
// import countries from 'world-atlas/countries-110m.json'
import features from '../../public/features.json'
import topojson from 'topojson-client'
import * as d3 from 'd3-geo'
import * as d3p from 'd3-geo-projection'
import slug from 'slug' 
import { normaliseStatus, statusToClass } from '../Status'
import { IDs } from '../Identity'
import { DataExchanges } from '../DataExchange'
import { Payments } from '../Payment'

// const regions = topojson.feature(countries, "countries").features
const regions = topojson.feature(features, "world").features
const graticule = d3.geoGraticule10()
const projection = d3p.geoNaturalEarth2()
const path = d3.geoPath(projection)
const outline = { type: "Sphere" }
const width = 800

// from Bostock: https://observablehq.com/@d3/world-map-svg
function height () {
  const [[x0, y0], [x1, y1]] = d3.geoPath(projection.fitWidth(width, outline)).bounds(outline);
  const dy = Math.ceil(y1 - y0), l = Math.min(Math.ceil(x1 - x0), dy);
  projection.scale(projection.scale() * (l - 1) / l).precision(0.2);
  return dy;
}

const NoData = [
  'french-southern-territories',
  'new-caledonia',
  'western-sahara'
]

const nameMap: Map<string,string> = new Map([
  ['Democratic Republic of Congo', 'Congo'],
  ['Russia', 'Russian Federation'],
  ['United States', 'United States of America'],
  ['United Kingdom', 'United Kingdom of Great Britain and Northern Ireland'],
  ['Czechia', 'Czech Republic'],
  ['Timor', 'Timor-Leste'],
  ['Cape Verde', 'Cabo Verde'],
  ['Micronesia (country)', 'Micronesia (Federated States of)'],
  ['West Bank', 'State of Palestine'],
  // ['Western Sahara'] Morocco has claimed authority over Western Sahara since 1975, but the United Nations (UN) does not recognize Moroccan control, calling Western Sahara a “non-self-governing territory.”
])

function regionName (name:string) {
  return nameMap.get(name) ?? name
}

const idMap = new Map()
IDs.forEach(row => {
  const country = row['Country']
  const status = row['DPI Status']
  idMap.set(country, normaliseStatus(status))
})

const payMap = new Map()
Payments.forEach(row => {
  const country = row['Country']
  const status = row['DPI Status']
  payMap.set(country, status)
})

const dataMap = new Map(DataExchanges.map(row => {
  const country = row['Country']
  const status = row['DPI Status']
  return [country, status]
}))

function getStatus (dpiType: string, region: string) {
  const country = regionName(region)
  if (dpiType === 'id') {
    return idMap.get(country)
  }
  if (dpiType === 'pay') {
    return payMap.get(country)
  }
  if (dpiType === 'data') {
    return dataMap.get(country)
  }
  throw Error(`No such dpiType, ${dpiType}`)
}

function countryToLink (name: string) {
  const path = slug(name)
  return NoData.includes(path) ? '.' : `/${path}`
}

const dpiType = Astro.props.dpiType ?? 'id'
const cropLeft = 80 // trim hard-to-see islands. data still available in card list view.
const cropRight = 105

---

<figure class="map mx-auto block">
  <svg viewBox={`${cropLeft} 0 ${width - cropRight} ${height()}`} class="bg-zinc-0 lg:py-4">
    <defs>
      <path id="outline" d={path(outline)} />
      <clipPath id="clip"><use href="#outline" /></clipPath>
    </defs>
    <g clip-path="url(#clip)">
      <use href="#outline" fill="#fff" />
      <!-- <path d={path(graticule)} fill="none" class="stroke-zinc-100"></path> -->
      <g class="regions">
      { regions.map(region => {
        const name = regionName(region.properties.name)
        const status = getStatus(dpiType, name)
        return (
          <a href={countryToLink(name)}>
            <title>{name}
  Status: {status}</title>
            <path d={path(region)} class={statusToClass(status)}></path>
          </a>
        )
      })}
      </g>
    </g>
    <!-- <use href="#outline" fill="none" class="stroke-zinc-300 stroke-1" /> -->
  </svg>
  <figcaption>
    <p class="text-center -mt-10 lg:-mt-24 font-sans tracking-wide text-zinc-400 text-xs">
      { dpiType === 'id' && 'Digital ID System' }
      { dpiType === 'pay' && 'Payment System' }
      { dpiType === 'data' && 'Data Exchange System' }
      implementation status by country
    </p>
  </figcaption>
</div>
