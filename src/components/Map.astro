---
// import countries from 'world-atlas/countries-110m.json'
import features from '../../public/features-mod.json'
import topojson from 'topojson-client'
import * as d3 from 'd3-geo'
import * as d3p from 'd3-geo-projection'
import slug from 'slug'

// const regions = topojson.feature(countries, "countries").features
const regions = topojson.feature(features, "world").features
const graticule = d3.geoGraticule10()
const projection = d3p.geoNaturalEarth2()
const path = d3.geoPath(projection)
const outline = { type: "Sphere" }
const width = 800

// from Bostock: https://observablehq.com/@d3/world-map-svg
function height () {
  const [[x0, y0], [x1, y1]] = d3.geoPath(projection.fitWidth(width, outline)).bounds(outline);
  const dy = Math.ceil(y1 - y0), l = Math.min(Math.ceil(x1 - x0), dy);
  projection.scale(projection.scale() * (l - 1) / l).precision(0.2);
  return dy;
}

const NoData = [
  'french-southern-territories',
  'new-caledonia',
  'western-sahara'
]

const StatusMap = {
  'Active': 'oklch(0.925 0.084 155.995)',
  'In Progress': 'oklch(0.924 0.12 95.746)',   //amber
  'Proposed': 'oklch(0.882 0.059 254.128)',    // blue
  'Inactive': 'oklch(0.882 0.059 254.128)',    // also blue

  'Rollout': 'oklch(0.925 0.084 155.995)',     // green
  'Pilot': 'oklch(0.924 0.12 95.746)',
  'Plan': 'oklch(0.882 0.059 254.128)',

  'Unknown': '#E0DFDD',
  'NA': '#E0DFDD'
}

function statusToColour (status) {
  return `${StatusMap[status]}`
}

function countryToLink (name) {
  const path = slug(name)
  return NoData.includes(path) ? '.' : `/${path}`
}

const dpiType = Astro.props.dpiType ?? 'id'
const cropLeft = 80 // trim hard to see islands. data still available in card list view.
const cropRight = 105

---

<figure class="map mx-auto block">
  <svg viewBox={`${cropLeft} 0 ${width - cropRight} ${height()}`} class="bg-zinc-0 lg:py-4">
    <defs>
      <path id="outline" d={path(outline)} />
      <clipPath id="clip"><use href="#outline" /></clipPath>
    </defs>
    <g clip-path="url(#clip)">
      <use href="#outline" fill="#fff" />
      <!-- <path d={path(graticule)} fill="none" class="stroke-zinc-100"></path> -->
      <g class="regions">
      { regions.map(region => (
        <a href={countryToLink(region.properties.name)}>
          <title>{region.properties.name}
Status: {region.properties.status[dpiType]}</title>
          <path d={path(region)} fill={statusToColour(region.properties.status[dpiType])}></path>
        </a>
      ))}
      </g>
    </g>
    <!-- <use href="#outline" fill="none" class="stroke-zinc-300 stroke-1" /> -->
  </svg>
  <figcaption>
    <p class="text-center -mt-10 lg:-mt-24 font-sans tracking-wide text-zinc-400 text-xs">
      { dpiType === 'id' && 'Digital ID System' }
      { dpiType === 'pay' && 'Payment System' }
      { dpiType === 'data' && 'Data Exchange System' }
      implementation status by country
    </p>
  </figcaption>
</div>
